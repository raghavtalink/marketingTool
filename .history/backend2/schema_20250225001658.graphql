scalar DateTime
scalar Upload

type Mutation {
  createUser(input: UserCreateInput!): User!
  login(input: UserLoginInput!): Token!
  createProduct(input: ProductCreateInput!): Product!
  generateContent(input: AIPromptInput!): AIResponse!
  createCampaign(input: SocialMediaCampaignInput!): SocialMediaCampaign!
  register(input: UserCreateInput!): User!
  updateProduct(id: ID!, input: ProductCreateInput!): Product!
  deleteProduct(id: ID!): Boolean!
  deleteGeneratedContent(contentId: ID!): Boolean!
  chat(input: ChatInput!): ChatResponse!
  listCampaigns(productId: String!): [SocialMediaCampaign!]!
  analyzeTrends(input: MarketTrendAnalysisInput!): MarketAnalysis!
  suggestPricing(input: DynamicPricingInput!): MarketAnalysis!
  recommendBundles(input: BundleRecommendationInput!): MarketAnalysis!
  removeBackground(input: BackgroundRemovalInput!): ImageProcessingResponse!
  generateImage(input: ImageGenerationInput!): ImageProcessingResponse!
  adjustImage(input: ImageAdjustmentInput!): ImageProcessingResponse!
  saveImageEditorProject(input: ImageAdjustmentInput!): ImageEditorProject!
  updateCampaign(id: ID!, input: UpdateCampaignInput!): SocialMediaCampaign!
  deleteCampaign(id: ID!): Boolean!
  generateCampaignContent(campaignId: ID!, platform: SocialMediaPlatform!): ContentPlan!
  generateTitle(input: ContentInput!): AIResponse!
  generateSEOTags(input: ContentInput!): AIResponse!
  generateFullListing(input: ContentInput!): AIResponse!
  chat(input: ChatInput!): ChatResponse!

}

type User {
  id: ID!
  username: String!
  email: String!
}

type Token {
  accessToken: String!
  tokenType: String!
}

type Product {
  id: ID!
  name: String!
  description: String
  category: String
  price: Float
  inventoryCount: Int
  competitorUrls: [String]
  currency: String
  userId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AIResponse {
  id: ID!
  content: String!
  contentType: String!
  productId: String!
  generatedAt: DateTime!
  webDataUsed: Boolean!
}

type ChatMessage {
  message: String!
  sender: String!
  timestamp: DateTime!
}

type ChatResponse {
  content: String!
  format: String!
  webDataUsed: Boolean!
}

type SocialMediaCampaign {
  id: ID!
  userId: String!
  productId: String!
  campaignName: String!
  platforms: [SocialMediaPlatform!]!
  objectives: [CampaignObjective!]!
  contentPlan: [ContentPlan!]!
  status: CampaignStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ImageEditorProject {
  id: ID!
  userId: String!
  productId: String!
  backgroundImage: String
  productImage: String
  editedImage: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ImageProcessingResponse {
  success: Boolean!
  image: String
  error: String
}

input UserCreateInput {
  username: String!
  email: String!
  password: String!
}

input UserLoginInput {
  email: String!
  password: String!
}

input ProductCreateInput {
  name: String!
  description: String
  category: String
  price: Float
  inventoryCount: Int
  competitorUrls: [String]
  currency: String
}

input AIPromptInput {
  productId: String!
  promptType: String!
  sentiment: String
}

input ChatInput {
  productId: String!
  messages: [ChatMessageInput!]!
  searchWeb: Boolean
}

input ChatMessageInput {
  message: String!
  sender: String!
}

input SocialMediaCampaignInput {
  productId: String!
  campaignName: String!
  platforms: [SocialMediaPlatform!]!
  objectives: [CampaignObjective!]!
}

input BackgroundRemovalInput {
  productId: String!
  image: Upload!
}

input ImageGenerationInput {
  prompt: String!
  style: String
  size: String
}

input ImageAdjustmentInput {
  productId: String!
  backgroundImage: Upload
  productImage: Upload
  brightness: Float
  contrast: Float
}

input UpdateCampaignInput {
  campaignName: String
  platforms: [SocialMediaPlatform!]
  objectives: [CampaignObjective!]
  status: CampaignStatus
}

type Query {
me: User
  products: [Product!]!
  product(id: ID!): Product
  contentHistory(productId: String!): [AIResponse!]!
  marketAnalysisHistory(analysisType: String!): [MarketAnalysis!]!
  imageEditorProjects: [ImageEditorProject!]!
  imageEditorProject(id: ID!): ImageEditorProject
  campaigns: [SocialMediaCampaign!]!
  campaign(id: ID!): SocialMediaCampaign
}

enum MarketDemand {
  LOW
  NORMAL
  HIGH
}

enum Season {
  CURRENT
  SPRING
  SUMMER
  FALL
  WINTER
}

enum PriceRange {
  LOW
  MEDIUM
  HIGH
  PREMIUM
}

enum TimeFrame {
  CURRENT
  THREE_MONTHS
  SIX_MONTHS
  ONE_YEAR
}

type CompetitorData {
  name: String!
  price: Float!
  currency: String!
  url: String
  features: [String!]
}

type MarketAnalysis {
  id: ID!
  productId: String!
  analysisType: String!
  content: String!
  generatedAt: DateTime!
  competitors: [CompetitorData!]
  targetMargin: Float
  marketDemand: MarketDemand
  season: Season
  targetAudience: String
  priceRange: PriceRange
}

input MarketTrendAnalysisInput {
  productId: String!
  timeframe: TimeFrame!
  trendType: String
}

input DynamicPricingInput {
  productId: String!
  targetMargin: Float!
  competitorPrices: [Float!]
  marketDemand: MarketDemand!
  season: Season!
}

input BundleRecommendationInput {
  productIds: [String!]!
  targetAudience: String!
  priceRange: PriceRange!
  season: Season!
}

input ImageGenerationInput {
  prompt: String!
  style: String
  size: String
  steps: Int
}

enum SocialMediaPlatform {
  FACEBOOK
  INSTAGRAM
  TWITTER
  LINKEDIN
}

enum CampaignObjective {
  AWARENESS
  ENGAGEMENT
  SALES
  TRAFFIC
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
}

type ContentPlan {
  platform: SocialMediaPlatform!
  content: String!
  generatedAt: DateTime!
  productId: String!
  sentiment: String
}

